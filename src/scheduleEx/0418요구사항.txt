// 패키지명은 scheduleEx
// Schedule -> 인터페이스 혹은 추상클래스로 구현
            -> getNextCall()
            -> sendCallToAgent()

// 자식클래스    -> LeastJob: 작업량을 균등하게 분배하여 특정 상담원에게 과부하가 걸리지 않도록 합니다.
                            - 1. 대기열에서 고객을 순서대로 넘깁니다
                            - 2. 상담전화 대기열이 가장 짧은 상담원에게 배분합니다.

			  					-> RoundRobin: 모든 상담원에게 공평하게 작업을 분배하여 특정 상담원에게 작업이 몰리지 않도록 합니다.
                						- 1. 대기열에서 고객을 순서대로 넘깁니다
                            - 2. 상담전화를 전화를 마친 상담원에게 배분합니다.

            			-> Priority: 우선순위가 높은 작업을 먼저 처리하여 중요한 작업이 빠르게 완료되도록 합니다.
                						- 1. 대기열에서 우선순위가 높은 고객을 먼저 줄세웁니다.
                            - 2. 상담전화를 일 잘하는 상담원에게 먼저 배분합니다.

// ScheduleTest.java -> main 함수에 포함 또는 run()을 템플릿 메서드 삼아 작성 후 실행
		// Scanner 객체를 사용하여
		// R, r 을 입력시 sch에 new RoundRobin()
		// L, l - LeastJob
		// P, p - Priority로 인스턴스를 생성
		// Q, q - 시스템을 종료합니다

		while (true) {

            // Scanner 객체를 사용하여
            System.out.println("연결방식 선택 R, P, L / 종료는 Q");
            Scanner sc = new Scanner(System.in);
            char c = sc.next().toUpperCase().charAt(0);

            // R, r 을 입력시 sch에 new RoundRobin()
            // L, l - LeastJob
            // P, p - Priority로 인스턴스를 생성하도록 조건문을 만들어주세요
            // Q, q - 시스템을 종료합니다
            if (c == 'Q') {
                System.out.println("프로그램 종료");
                sc.close(); // 자원 반납 후 종료
                break;
            }
            else if ( c == 'R') { // char은 작은따옴표로 감싸줍니다. - 단일문자이므로 문자열인 String(" ")과 다름
                System.out.println("Round Robin");
            } else if (c == 'P') {
                System.out.println("Priority");
            } else if (c == 'L') {
                System.out.println("Least Job");
            }

        }